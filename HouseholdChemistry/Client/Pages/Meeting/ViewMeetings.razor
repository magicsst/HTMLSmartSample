@page "/viewscheduledmeetings"
@using HouseholdChemistry.Shared.MeetingManagement.SearchGrid;
@using System.Collections

@inject IJSRuntime js
@inject IMeetingService meetingService
@inject ISessionStorageService sessionStorage
@inject NavigationManager navManager

<style>
    .headerWrapText {
        word-wrap: break-word;
        display: flex;
        white-space: normal;
        line-height: 20px;
        height: 100%;
        align-items: center;
    }
</style>

<PageTitle>Οικοχημική - Προγραμματισμένες Συναντήσεις</PageTitle>

<br />
<!-- Hide Right Click -->
<div oncontextmenu="return false;">
    <EditForm Model="searchScheduledMeetingsGridDTO" OnValidSubmit="GetListOfMeetings">
        <DataAnnotationsValidator />
        <div class="container">
            <div class="container text-center">
                <h3>Φίλτρα Αναζήτησης Προγραμματισμένων Συναντήσεων</h3><br>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="dateFrom" class="form-check-label">Ημερομηνία Έναρξης Αναζήτησης</label>
                            <DateTimePicker id="dateFrom"
                                            class="form-control"
                                            @bind-Value="@searchScheduledMeetingsGridDTO.DateFrom"
                                            DropDownDisplayMode="DateTimePickerDropDownDisplayMode.Calendar"
                                            DropDownPosition="DropDownPosition.Bottom"
                                            CalendarButton="true"
                                            FormatString="dd-MM-yyyy" />
                            <ValidationMessage For="@(()=> @searchScheduledMeetingsGridDTO.DateFrom)" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="dateTo" class="form-check-label">Ημερομηνία Λήξης Αναζήτησης</label>
                            <DateTimePicker id="dateTo"
                                            class="form-control"
                                            @bind-Value="@searchScheduledMeetingsGridDTO.DateTo"
                                            DropDownDisplayMode="DateTimePickerDropDownDisplayMode.Calendar"
                                            DropDownPosition="DropDownPosition.Bottom"
                                            CalendarButton="true"
                                            FormatString="dd-MM-yyyy" />
                            <ValidationMessage For="@(()=> @searchScheduledMeetingsGridDTO.DateTo)" />
                        </div>
                    </div>
                </div>
            </div>
            <br />

            <div class="row">
                <div class="text-center mt-2">
                    <button class="btn btn-primary" type="submit" id="startSearch">
                        <span class="@_spinnerClassSearching" role="status" aria-hidden="true"></span>
                        Αναζήτηση
                    </button>
                </div>
            </div>
            <br />
            <br />

            @if (meetingGridInfoResponseResult.Data != null && meetingGridInfoResponseResult.Data.Count > 0)
            {
                <div class="row">
                    <Grid Id="meetingsGrid"
                          Datasource="@meetingGridInfoResponseResult.Data"
                          DataSourceSettings="@dataSourceSettings"
                          Sorting="@dateSorting"
                          Behavior="@behavior"
                          Appearance="@appearance"
                          Selection="@selection"
                          Filtering="@filtering"
                          Style="@gridStyle"
                          Layout="@gridRowLayout"
                          Header="@header"
                          Grouping="@grouping"
                          Locale="@locale">
                        <Columns>
                            <Column DataField="PlannedStartDate1" Label="Ημερομηνία Έναρξης" ClassName="@("headerWrapText")" DataType="date" CellsFormat="dd/MM/yyyy" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" Width="100"></Column>
                            <Column DataField="ActualClosedDate" Label="Ημερομηνία Ολοκλήρωσης" ClassName="@("headerWrapText")" DataType="date" CellsFormat="dd/MM/yyyy" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" Width="100"></Column>
                            <Column DataField="Name" Label="Πελάτης" Width="150"></Column>
                            <Column DataField="Katastasi_Synantisis" Label="Κατάσταση" Template="statusTemplate" Width="200"></Column>
                            <Column DataField="fCityCode" Label="Πόλη" Width="120"></Column>
                            <Column DataField="fSiteDescription" Label="Υποκατάστημα"></Column>
                            <Column DataField="fSiteAddress" Label="Διεύθυνση"></Column>
                            <Column DataField="Notes" Label="Σχόλιο"></Column>
                            <Column DataField="Code" Label="Κωδικός" Width="90"></Column>
                            <Column DataField="IsProgrammed" Label="Προγραμματισμένη?" Template="checkTemplate" Align="HorizontalAlignment.Center" Width="80"></Column>
                            <Column DataField="Url" Label="" Width="90" Template="@redirectTemplate" Align="HorizontalAlignment.Center"></Column>
                        </Columns>
                    </Grid>
                </div>
            }
            else
            {
                <div class="row">
                    @gridMessage
                </div>
            }

        </div>
        <br />
        <br />
    </EditForm>
</div>

<template id="redirectTemplate">
    <div>
        <a href="{{value}}" class="button">Αναλυτικά</a>
    </div>
</template>

<template id="statusTemplate">
    <div style="width: 100%; height:100%;">
        <div smart-if="value == 'Ολοκληρώθηκε'">
            <span style="margin-left: 7px; padding: 4px 18px; border-radius: 10px 5px; color: #fff; background: #013220;">Ολοκληρώθηκε</span>
        </div>
        <div smart-else>
            <span style="margin-left: 7px; padding: 4px 18px; border-radius: 10px 5px; color: #fff; background: #0018F9">Ανοικτό</span>
        </div>
    </div>
</template>

@code {
    private SearchScheduledMeetingsGridDTO searchScheduledMeetingsGridDTO = new SearchScheduledMeetingsGridDTO();
    private ServiceResponse<List<GetMeetingGridInfoDTO>> meetingGridInfoResponseResult = new ServiceResponse<List<GetMeetingGridInfoDTO>>();

    private string salesPersonName = String.Empty;

    private string _spinnerClassSearching = string.Empty;

    #region "Grid Properties"
    private string redirectTemplate = "#redirectTemplate";
    private string statusTemplate = "#statusTemplate";
    string checkTemplate = "checkBox";
    private string gridStyle = string.Empty;

    private string gridMessage = String.Empty;
    private string locale = "gr";

    private GridDataSourceSettings dataSourceSettings = new GridDataSourceSettings();

    private GridSorting dateSorting = new GridSorting()
        {
            Enabled = true
        };

    private GridBehavior behavior = new GridBehavior()
        {
            ColumnResizeMode = GridResizeMode.GrowAndShrink
        };

    private GridAppearance appearance = new GridAppearance()
        {
            AlternationCount = 2,
            ShowRowLines = false,
            ShowColumnLines = false
        };

    private GridSelection selection = new GridSelection()
        {
            Enabled = false,
            Mode = GridSelectionMode.One
        };

    private GridFiltering filtering = new GridFiltering()
        {
            Enabled = true
        };

    private GridLayout gridRowLayout = new GridLayout()
        {
            RowHeight = 50
        };


    private GridHeader header = new GridHeader()
        {
            Visible = true,
            Buttons = new string[] { "columns", "filter", "sort", "group", "search" }
        };

    private GridGrouping grouping = new GridGrouping()
        {
            Enabled = true
        };

    private IDictionary messages = new Dictionary<string, object>()
    {
      {
          "en",
          new Dictionary<string, object>()
          {
              {"invalidColumnProperty", "{{elementType}}: Invalid property name \"{{propertyName}}\" set for Column: \"{{type}}\""},
              {"invalidRowProperty", "{{elementType}}: Invalid property name \"{{propertyName}}\" set for Row\""},
              {"invalidCellValue", "Invalid cell value \"{{value}}\", Validation rule: \"{{validationRule}}\""},
              {"frozenColumns", "{{elementType}}: To Pin/Freeze a column group, all columns within it should be frozen."},
              {"frozenRows", "{{elementType}}: To Pin/Freeze a special cell, all rows within it should be frozen."},
              {"columnGroups", "{{elementType}}: Please, check the initialization of the smartGrid's columns array. The columns in a column group are expected to be siblings in the columns array."},
              {"min", "Min: {{value}}"},
              {"max", "Max: {{value}} "},
              {"sum", "Sum: {{value}} "},
              {"avg", "Avg: {{value}} "},
              {"count", "Count: {{value}} "},
              {"pagerFirstButton", "First"},
              {"pagerLastButton", "Last"},
              {"pagerPreviousButton", "Previous"},
              {"pagerNextButton", "Next"},
              {"pagerNavigateToLabel", "Go to:"},
              {"pagerPageSizeLabel", "Show:"},
              {"pagerNavigateToInputPlaceholder", ""},
              {"pagerEllipsis", "..."},
              {"pagerSummaryString", "of"},
              {"pagerSummaryPrefix", "of"},
              {"pagerSummarySuffix", ""},
              {"columnMenuCustomizeType", "Customize type"},
              {"columnMenuItemRename", "Rename"},
              {"columnMenuItemEditDescription", "Edit description"},
              {"columnMenuItemDuplicate", "Duplicate"},
              {"columnMenuItemInsertLeft", "Insert left"},
              {"columnMenuItemInsertRight", "Insert right"},
              {"columnMenuItemSortAsc", "Sort {{mode}}"},
              {"columnMenuItemSortDesc", "Sort {{mode}}"},
              {"columnMenuItemRemoveSort", "Remove Sort"},
              {"columnMenuItemFilter", "Filter"},
              {"columnMenuItemRemoveFilter", "Remove Filter"},
              {"columnMenuItemGroupBy", "Group by this column"},
              {"columnMenuItemRemoveGroupBy", "Remove Group"},
              {"columnMenuItemHide", "Hide"},
              {"columnMenuItemDelete", "Delete"},
              {"columnResizeTooltip", "width: {{value}}px"},
              {"rowResizeTooltip", "height: {{value}}px"},
              {"commandBarAddRow", "Add"},
              {"commandBarDeleteRow", "Delete"},
              {"commandBarBatchRevert", "Revert"},
              {"commandBarBatchSave", "Save"},
              {"commandBarFilter", "Filter"},
              {"commandBarSort", "Sort"},
              {"commandBarSearch", "Search"},
              {"commandBarCustomize", "Customize"},
              {"commandBarGroup", "Group"},
              {"commandColumnEdit", "Edit"},
              {"commandColumnDelete", "Delete"},
              {"commandColumnCancel", "Cancel"},
              {"commandColumnUpdate", "Update"},
              {"commandColumnMenu", ""},
              {"expandRow", "Expand row"},
              {"collapseRow", "Collapse row"},
              {"addNewRow", "Click here to add a new row"},
              {"addNewColumn", "Click here to add a new column"},
              {"dialogChartHeader", "{{value}} Chart"},
              {"dialogRowDetailHeader", "Row Id: {{value}}"},
              {"dialogDescriptionHeader", "Column: {{value}}"},
              {"dialogRowDetailButtonConfirm", "OK"},
              {"dialogRowDetailButtonCancel", "CANCEL"},
              {"dialogEditHeader", "Edit {{value}}"},
              {"dialogAddButtonConfirm", "ADD"},
              {"dialogAddButtonCancel", "CANCEL"},
              {"dialogEditButtonConfirm", "OK"},
              {"dialogEditButtonCancel", "CANCEL"},
              {"dialogFilterButtonConfirm", "FILTER"},
              {"dialogFilterButtonCancel", "CLEAR"},
              {"dialogDeleteButtonConfirm", "DELETE"},
              {"dialogDeleteButtonCancel", "CANCEL"},
              {"dialogEditColumn", "Column: {{value}}"},
              {"dialogAddColumn", "Add Column"},
              {"dialogAddHeader", "Add Row"},
              {"dialogDeleteHeader", "Delete Row"},
              {"dialogFilterHeader", "Filter by"},
              {"dialogFilterMinLabel", "Min"},
              {"dialogFilterMaxLabel", "Max"},
              {"conditionalFormatting", "Conditional Formatting"},
              {"groupBarLabel", "Drag a column header here to group by that column"},
              {"dialogDeleteContent", "Are you sure you want to delete this row?"},
              {"calendar", new Dictionary<string, object>(){
                {"/", "/"},
                {":", ":"},
                {"firstDay", 0},
                {"days", new Dictionary<string, object>() {
                  {"names", new string[]{
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                  }},
                  {"namesAbbr", new string[]{
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                  }},
                  {"namesShort", new string[]{
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                  }}
                }},
                {"months", new Dictionary<string, object>() {
                  {"names", new string[]{
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                    ""
                  }},
                  {"namesAbbr", new string[]{
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec",
                    ""
                  }}
                }},
                {"AM", new string[]{
                  "AM",
                  "am",
                  "AM"
                }},
                {"PM", new string[]{
                  "PM",
                  "pm",
                  "PM"
                }},
                {"eras", new Dictionary<string, object>()
                  {
                    {"name", "A.D."},
                    {"start", null},
                    {"offset", 0}
                  }
                },
                {"currencySymbol", "$"},
                {"currency", "USD"},
                {"currencySymbolPosition", "before"},
                {"decimalSeparator", "."},
                {"thousandsSeparator", ","},
              }},
              {"CONTAINS", "Contains"},
              {"DOES_NOT_CONTAIN", "Does not contain"},
              {"ENDS_WITH", "Ends with"},
              {"EQUAL", "Equal"},
              {"GREATER_THAN", "Greater than"},
              {"GREATER_THAN_OR_EQUAL", "Greater than or equal"},
              {"LESS_THAN", "Less than"},
              {"LESS_THAN_OR_EQUAL", "Less than or equal"},
              {"NOT_EQUAL", "Not equal"},
              {"RANGE", "Range"},
              {"CLEAR_FILTER", "Clear Filter"},
              {"STARTS_WITH", "Starts with"},
              {"addFilter", "+ Add filter"},
              {"and", "And"},
              {"apply", "Apply"},
              {"booleanFirst", "☐"},
              {"booleanLast", "☑"},
              {"cancel", "Cancel"},
              {"CONTAINS_CASE_SENSITIVE", "Contains (case sensitive)"},
              {"dateFirst", "1"},
              {"dateLast", "9"},
              {"DOES_NOT_CONTAIN_CASE_SENSITIVE", "does not contain (case sensitive)"},
              {"EMPTY", "empty"},
              {"ENDS_WITH_CASE_SENSITIVE", "ends with (case sensitive)"},
              {"EQUAL_CASE_SENSITIVE", "equal (case sensitive)"},
              {"filter", "Filter"},
              {"customize", "Customize Columns"},
              {"filteredByMultiple", "{{n}} filters"},
              {"filteredByOne", "1 filter"},
              {"filterValuePlaceholder", "Value"},
              {"find", "Find a field"},
              {"findInView", "Find in view"},
              {"firstBy", "Sort by"},
              {"found", "{{nth}} of {{n}}"},
              {"from", "from"},
              {"noFilters", "No filters applied"},
              {"noResults", "No results"},
              {"noSorting", "No sorting applied"},
              {"NOT_EMPTY", "not empty"},
              {"NOT_NULL", "not null"},
              {"NULL", "null"},
              {"numberFirst", "1"},
              {"numberLast", "9"},
              {"ok", "OK"},
              {"or", "Or"},
              {"pickAnother", "Pick another field to sort by"},
              {"sort", "Sort"},
              {"group", "Group"},
              {"sortedByMultiple", "Sorted by {{n}} fields"},
              {"sortedByOne", "Sorted by 1 field"},
              {"STARTS_WITH_CASE_SENSITIVE", "starts with (case sensitive)"},
              {"stringFirst", "A"},
              {"stringLast", "Z"},
              {"thenBy", "then by"},
              {"where", "Where"},
              {"collapseAll", "Collapse all"},
              {"expandAll", "Expand all"},
              {"noGrouping", "No grouping"},
              {"groupedByMultiple", "{{n}} groups"},
              {"groupedByOne", "1 group"},
              {"firstByGroup", "Group by"},
              {"pickAnotherGroupBy", "Pick another field to group by"},
              {"add", "Add condition"},
              {"all", "All columns"},
              {"between", "Between"},
              {"close", "Close"},
              {"column", "Column:"},
              {"condition", "Condition:"},
              {"equal", "Equal To"},
              {"fontFamily", "Font family:"},
              {"fontSize", "Font size:"},
              {"format", "Format:"},
              {"greaterThan", "Greater Than"},
              {"highlight", "Highlight"},
              {"lessThan", "Less Than"},
              {"notEqual", "Not Equal To"},
              {"remove", "Remove condition"},
              {"secondValue", "Second value:"},
              {"text", "Text"},
              {"value", "Value:"}
          }
      },
      {
        "el",
        new Dictionary<string, object>()
          {
              {"invalidColumnProperty", "{{elementType}}: Σε Λανθασμένο όνομα ιδιότητας \"{{propertyName}}\" έγινε η ανάθεση για τη στήλη: \"{{type}}\""},
              {"invalidRowProperty", "{{elementType}}: Σε Λανθασμένο όνομα ιδιότητας \"{{propertyName}}\" έγινε η ανάθεση για τη γραμμή\""},
              {"invalidCellValue", "Λανθασμένη τιμή στο κελί \"{{value}}\", Validation rule: \"{{validationRule}}\""},
              {"frozenColumns", "{{elementType}}: Για να κάνετε Pin/Freeze ένα column group, όλες οι στήλες εντός του column group πρέπει να είναι frozen."},
              {"frozenRows", "{{elementType}}: Για να κάνετε Pin/Freeze ένα special cell, όλες οι γραμμές εντός αυτού θα πρέπει να είναι frozen."},
              {"columnGroups", "{{elementType}}: Παρακαλώ, ελέγξτε το initialization του smartGrid's columns array. Τα columns σε ένα column group είναι expected να γίνουν siblings στο columns array."},
              {"min", "Min: {{value}}"},
              {"max", "Max: {{value}} "},
              {"sum", "Sum: {{value}} "},
              {"avg", "Avg: {{value}} "},
              {"count", "Count: {{value}} "},
              {"pagerFirstButton", "Αρχή"},
              {"pagerLastButton", "Τέλος"},
              {"pagerPreviousButton", "Προηγούμενο"},
              {"pagerNextButton", "Επόμενο"},
              {"pagerNavigateToLabel", "Πήγαινε στο:"},
              {"pagerPageSizeLabel", "Δείξε:"},
              {"pagerNavigateToInputPlaceholder", ""},
              {"pagerEllipsis", "..."},
              {"pagerSummaryString", "από"},
              {"pagerSummaryPrefix", "από"},
              {"pagerSummarySuffix", ""},
              {"columnMenuCustomizeType", "Customize type"},
              {"columnMenuItemRename", "Rename"},
              {"columnMenuItemEditDescription", "Edit description"},
              {"columnMenuItemDuplicate", "Duplicate"},
              {"columnMenuItemInsertLeft", "Insert left"},
              {"columnMenuItemInsertRight", "Insert right"},
              {"columnMenuItemSortAsc", "Sort {{mode}}"},
              {"columnMenuItemSortDesc", "Sort {{mode}}"},
              {"columnMenuItemRemoveSort", "Remove Sort"},
              {"columnMenuItemFilter", "Filter"},
              {"columnMenuItemRemoveFilter", "Remove Filter"},
              {"columnMenuItemGroupBy", "Group by this column"},
              {"columnMenuItemRemoveGroupBy", "Remove Group"},
              {"columnMenuItemHide", "Hide"},
              {"columnMenuItemDelete", "Delete"},
              {"columnResizeTooltip", "width: {{value}}px"},
              {"rowResizeTooltip", "height: {{value}}px"},
              {"commandBarAddRow", "Add"},
              {"commandBarDeleteRow", "Delete"},
              {"commandBarBatchRevert", "Revert"},
              {"commandBarBatchSave", "Save"},
              {"commandBarFilter", "Filter"},
              {"commandBarSort", "Sort"},
              {"commandBarSearch", "Search"},
              {"commandBarCustomize", "Customize"},
              {"commandBarGroup", "Group"},
              {"commandColumnEdit", "Edit"},
              {"commandColumnDelete", "Delete"},
              {"commandColumnCancel", "Cancel"},
              {"commandColumnUpdate", "Update"},
              {"commandColumnMenu", ""},
              {"expandRow", "Expand row"},
              {"collapseRow", "Collapse row"},
              {"addNewRow", "Click here to add a new row"},
              {"addNewColumn", "Click here to add a new column"},
              {"dialogChartHeader", "{{value}} Chart"},
              {"dialogRowDetailHeader", "Row Id: {{value}}"},
              {"dialogDescriptionHeader", "Column: {{value}}"},
              {"dialogRowDetailButtonConfirm", "OK"},
              {"dialogRowDetailButtonCancel", "CANCEL"},
              {"dialogEditHeader", "Edit {{value}}"},
              {"dialogAddButtonConfirm", "ADD"},
              {"dialogAddButtonCancel", "CANCEL"},
              {"dialogEditButtonConfirm", "OK"},
              {"dialogEditButtonCancel", "CANCEL"},
              {"dialogFilterButtonConfirm", "FILTER"},
              {"dialogFilterButtonCancel", "CLEAR"},
              {"dialogDeleteButtonConfirm", "DELETE"},
              {"dialogDeleteButtonCancel", "CANCEL"},
              {"dialogEditColumn", "Column: {{value}}"},
              {"dialogAddColumn", "Add Column"},
              {"dialogAddHeader", "Add Row"},
              {"dialogDeleteHeader", "Delete Row"},
              {"dialogFilterHeader", "Filter by"},
              {"dialogFilterMinLabel", "Min"},
              {"dialogFilterMaxLabel", "Max"},
              {"conditionalFormatting", "Conditional Formatting"},
              {"groupBarLabel", "Drag a column header here to group by that column"},
              {"dialogDeleteContent", "Are you sure you want to delete this row?"},
              {"calendar", new Dictionary<string, object>(){
                {"/", "/"},
                {":", ":"},
                {"firstDay", 0},
                {"days", new Dictionary<string, object>() {
                  {"names", new string[]{
                    "Κυριακή",
                    "Δευτέρα",
                    "Τρίτη",
                    "Τετάρτη",
                    "Πέμπτη",
                    "Παρασκευή",
                    "Σαββάτο"
                  }},
                  {"namesAbbr", new string[]{
                    "Κυρ",
                    "Δευ",
                    "Τρι",
                    "Τετ",
                    "Πεμ",
                    "Παρ",
                    "Σαβ"
                  }},
                  {"namesShort", new string[]{
                    "Δε",
                    "Τρ",
                    "Τε",
                    "Πε",
                    "Πα",
                    "Σα",
                    "Κυ"
                  }}
                }},
                {"months", new Dictionary<string, object>() {
                  {"names", new string[]{
                    "Ιανουάριος",
                    "Φεβρουάριος",
                    "Μάρτιος",
                    "Απρίλιος",
                    "Μάιος",
                    "Ιούνιος",
                    "Ιούλιος",
                    "Αύγουστος",
                    "Σεπτέμβριος",
                    "Οκτώβριος",
                    "Νοέμβριος",
                    "Δεκέμβριος",
                    ""
                  }},
                  {"namesAbbr", new string[]{
                    "Ιαν",
                    "Φεβ",
                    "Μαρ",
                    "Apr",
                    "Μαη",
                    "Ιου",
                    "Ιου",
                    "Αυγ",
                    "Σεπ",
                    "Οκτ",
                    "Νοε",
                    "Δεκ",
                    ""
                  }}
                }},
                {"AM", new string[]{
                  "ΠΜ",
                  "πμ",
                  "ΠΜ"
                }},
                {"PM", new string[]{
                  "ΜΜ",
                  "μμ",
                  "ΜΜ"
                }},
                {"eras", new Dictionary<string, object>()
                  {
                    {"name", "A.D."},
                    {"start", null},
                    {"offset", 0}
                  }
                },
                {"currencySymbol", "€"},
                {"currency", "EUR"},
                {"currencySymbolPosition", "πριν"},
                {"decimalSeparator", ","},
                {"thousandsSeparator", "."},
              }},
              {"CONTAINS", "Περιέχει"},
              {"DOES_NOT_CONTAIN", "Δεν περιέχει"},
              {"ENDS_WITH", "Τελειώνει σε"},
              {"EQUAL", "Ίσο"},
              {"GREATER_THAN", "Μεγαλύτερο από"},
              {"GREATER_THAN_OR_EQUAL", "Μεγαλύτερο από΄ή ίσο με"},
              {"LESS_THAN", "Μικρότερο από"},
              {"LESS_THAN_OR_EQUAL", "Μικρότερο από ή ίσο"},
              {"NOT_EQUAL", "Διάφορο από"},
              {"RANGE", "Περιοχή"},
              {"CLEAR_FILTER", "Διαγραφή Φίλτρων"},
              {"STARTS_WITH", "Ξεκινάει με"},
              {"addFilter", "+ Προσθήκη Φίλτρου"},
              {"and", "Και"},
              {"apply", "Εφαρμογή"},
              {"booleanFirst", "☐"},
              {"booleanLast", "☑"},
              {"cancel", "Ακύρωση"},
              {"CONTAINS_CASE_SENSITIVE", "Περιέχει (Κεφαλαιοποίηση ενεργή)"},
              {"dateFirst", "1"},
              {"dateLast", "9"},
              {"DOES_NOT_CONTAIN_CASE_SENSITIVE", "Δεν περιέχει (Κεφαλαιοποίηση ενεργή)"},
              {"EMPTY", "Άδειο"},
              {"ENDS_WITH_CASE_SENSITIVE", "Τελειώνει σε (Κεφαλαιοποίηση ενεργή)"},
              {"EQUAL_CASE_SENSITIVE", "Ίσο με (Κεφαλαιοποίηση ενεργή)"},
              {"filter", "Φίλτρο"},
              {"customize", "Customize Columns"},
              {"filteredByMultiple", "{{n}} Φίλτρο"},
              {"filteredByOne", "1 Φίλτρο"},
              {"filterValuePlaceholder", "Τιμή"},
              {"find", "Find a field"},
              {"findInView", "Βρες στη προβολή"},
              {"firstBy", "Ταξινόμηση με"},
              {"found", "{{nth}} από {{n}}"},
              {"from", "Από"},
              {"noFilters", "Δεν εφαρμοστηκαν φίλτρα"},
              {"noResults", "Δεν βρέθηκαν αποτελέσματα"},
              {"noSorting", "Δεν έχει εφαρμωστει ταξινόμηση"},
              {"NOT_EMPTY", "not empty"},
              {"NOT_NULL", "not null"},
              {"NULL", "null"},
              {"numberFirst", "1"},
              {"numberLast", "9"},
              {"ok", "OK"},
              {"or", "Or"},
              {"pickAnother", "Επιλέξτε έπόμενο πεδίο προς ταξινόμηση"},
              {"sort", "Sort"},
              {"group", "Group"},
              {"sortedByMultiple", "Sorted by {{n}} fields"},
              {"sortedByOne", "Sorted by 1 field"},
              {"STARTS_WITH_CASE_SENSITIVE", "Ξεκινά με (Κεφαλαιοποίηση ενεργή)"},
              {"stringFirst", "A"},
              {"stringLast", "Z"},
              {"thenBy", "then by"},
              {"where", "Where"},
              {"collapseAll", "Collapse all"},
              {"expandAll", "Expand all"},
              {"noGrouping", "No grouping"},
              {"groupedByMultiple", "{{n}} groups"},
              {"groupedByOne", "1 group"},
              {"firstByGroup", "Group by"},
              {"pickAnotherGroupBy", "Pick another field to group by"},
              {"add", "Add condition"},
              {"all", "All columns"},
              {"between", "Between"},
              {"close", "Close"},
              {"column", "Column:"},
              {"condition", "Condition:"},
              {"equal", "Equal To"},
              {"fontFamily", "Font family:"},
              {"fontSize", "Font size:"},
              {"format", "Format:"},
              {"greaterThan", "Greater Than"},
              {"highlight", "Highlight"},
              {"lessThan", "Less Than"},
              {"notEqual", "Not Equal To"},
              {"remove", "Remove condition"},
              {"secondValue", "Second value:"},
              {"text", "Text"},
              {"value", "Value:"}
        }
      }
    };
    #endregion

    protected override async Task OnInitializedAsync()
    {
        //await ChangeDateLocalization();

        dataSourceSettings = new GridDataSourceSettings()
            {
                DataFields = new List<IGridDataSourceSettingsDataField>()
                {
                    new GridDataSourceSettingsDataField() { Name = "PlannedStartDate1", DataType = GridDataSourceSettingsDataFieldDataType.Date },
                    new GridDataSourceSettingsDataField() { Name = "ActualClosedDate", DataType = GridDataSourceSettingsDataFieldDataType.Date },
                    new GridDataSourceSettingsDataField() { Name = "Name", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "Katastasi_Synantisis", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "fCityCode", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "fSiteDescription", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "fSiteAddress", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "Notes", DataType = GridDataSourceSettingsDataFieldDataType.String},
                    new GridDataSourceSettingsDataField() { Name = "Code", DataType = GridDataSourceSettingsDataFieldDataType.String },
                    new GridDataSourceSettingsDataField() { Name = "IsProgrammed", DataType = GridDataSourceSettingsDataFieldDataType.Boolean },
                    new GridDataSourceSettingsDataField() { Name = "Url", DataType = GridDataSourceSettingsDataFieldDataType.String}

                },
                DataSourceType = GridDataSourceSettingsDataSourceType.Array
            };

        gridStyle = String.Format("height: {0}; border: 0;", "auto");
    }

    private async Task GetListOfMeetings()
    {
        _spinnerClassSearching = "spinner-border spinner-border-sm";

        meetingGridInfoResponseResult = await meetingService.GetGridMeetings(
            "100",
            searchScheduledMeetingsGridDTO.DateFrom,
            searchScheduledMeetingsGridDTO.DateTo);

        StateHasChanged();

        if (meetingGridInfoResponseResult.Data.Count == 0)
            gridMessage = "Δεν υπάρχουν διαθέσιμες συναντήσεις με τα κριτήρια που επιλέξατε...";
        else
            gridMessage = string.Empty;

        if (meetingGridInfoResponseResult.Data != null)
            gridStyle = String.Format("height: {0}; border: 0;", meetingGridInfoResponseResult.Data.Count < 10 ? "auto" : "400px");
        else
            gridStyle = String.Format("height: {0}; border: 0;", "auto");

        _spinnerClassSearching = string.Empty;
    }

    // private async Task ChangeDateLocalization()
    // {
    //     await js.InvokeAsync<object>("changeSearchLocalization", new { });
    // }
}